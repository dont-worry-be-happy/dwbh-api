import com.github.jk1.license.render.InventoryHtmlReportRenderer

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "net.ltgt.apt-eclipse" version "0.18"
    id "net.ltgt.apt-idea" version "0.18"
    id "com.diffplug.gradle.spotless" version "3.18.0"
    id "com.github.spotbugs" version "1.6.10"
    id 'com.bmuschko.docker-java-application' version '4.5.0'
    id 'com.github.jk1.dependency-license-report' version '1.5'
    id "com.github.hierynomus.license" version "0.15.0"
    id "net.kaleidos.dwbh.gradle-fixtures-plugin" version "0.1.2"
    id "org.owasp.dependencycheck" version "5.0.0-M2"
}

apply plugin: "application"
apply plugin: "java"
apply plugin: "pmd"
apply plugin: "jacoco"
apply from: 'gradle/quality.gradle'
apply from: 'gradle/fixtures.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/docs.gradle'
apply from: 'gradle/security.gradle'

group "kaleidos.net"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.2.0'
    }
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut.graphql:micronaut-graphql:1.1.0"
    compileOnly "io.micronaut:micronaut-inject-java"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    // database
    runtime 'io.micronaut.configuration:micronaut-jdbc-hikari'
    runtime 'org.postgresql:postgresql:42.2.5'
    compile 'io.micronaut.configuration:micronaut-flyway:1.0.0.RC3'
    compile 'org.jooq:jooq:3.11.9'
    compile 'org.jooq:jooq-meta:3.11.9'

    // graphql scalars
    compile 'com.graphql-java:graphql-java-extended-scalars:1.0'

    // authentication
    compile "com.auth0:java-jwt:3.7.0"
    compile 'com.github.scribejava:scribejava-apis:6.9.0'
    compile 'com.github.scribejava:scribejava-core:6.9.0'
    compile 'com.google.apis:google-api-services-oauth2:v1-rev155-1.25.0'
    compile 'org.springframework.security:spring-security-crypto:5.1.5.RELEASE'

    // mailing
    compile 'com.amazonaws:aws-java-sdk-ses:1.11.285'
    compile 'de.neuland-bfi:jade4j:1.2.7'

    // test
    testCompile "io.micronaut.test:micronaut-test-junit5:1.0.2"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testCompile 'com.tngtech.archunit:archunit-junit5-api:0.10.1'
    testRuntime 'com.tngtech.archunit:archunit-junit5-engine:0.10.1'

    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "org.mockito:mockito-junit-jupiter:2.22.0"
    testCompile 'io.github.benas:random-beans:3.7.0'
    testCompile "org.testcontainers:junit-jupiter:1.10.6"
    testCompile "org.testcontainers:postgresql:1.10.6"
    testCompile 'io.github.benas:random-beans:3.7.0'
    testCompile 'io.projectreactor:reactor-test:3.2.11.RELEASE'

    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-validation"

    testCompile "org.hamcrest:hamcrest-all:1.3"

    fixtures 'org.postgresql:postgresql:42.2.5'
}

shadowJar {
    mergeServiceFiles()
}

/**
 * Arguments when executing :run task
 *
 * @since 0.1.0
 */
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

/**
 * Main class to execute when executing :run task
 *
 * @since 0.1.0
 */
mainClassName = "dwbh.api.Application"

/**
 * Java compilation configuration
 *
 * @since 0.1.0
 */
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

/**
 * Configuration for generating license reports from all
 * the project dependencies
 *
 * @since 0.1.0
 */
licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
    configurations = ['compile']
}

/**
 * Improving code quality and documentation making sure
 * certain extra tasks are executed at the end of the
 * :build task
 *
 * @since 0.1.0
 */
build.finalizedBy(javadoc, jacocoTestReport)

/**
 * Enforcing code coverage restrictions
 *
 * @since 0.1.0
 */
check.dependsOn jacocoTestCoverageVerification//, dependencyCheckAnalyze